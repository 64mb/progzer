name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  workflow_run:
    workflows: ['Auto Tag']
    types:
      - completed

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, starting with v0.1.0"
            echo "latest_tag=v0.1.0" >> $GITHUB_OUTPUT
          else
            echo "Latest tag: $LATEST_TAG"
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Checkout latest tag
        run: git checkout ${{ steps.get_latest_tag.outputs.latest_tag }}

      - name: Display the latest tag
        run: |
          echo "Checked out to the latest tag: ${{ env.latest_tag }}"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build all platforms
        run: task build-all-local

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.latest_tag }}
          files: |
            dist/progzer-linux-amd64
            dist/prgz-linux-amd64
            dist/progzer-linux-arm64
            dist/prgz-linux-arm64
            dist/progzer-darwin-arm64
            dist/prgz-darwin-arm64
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, starting with v0.1.0"
            echo "latest_tag=v0.1.0" >> $GITHUB_OUTPUT
          else
            echo "Latest tag: $LATEST_TAG"
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi
          VERSION=${LATEST_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout latest tag
        run: git checkout ${{ steps.get_latest_tag.outputs.latest_tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/64mb/progzer
          tags: |
            type=semver,pattern=${{ steps.get_latest_tag.outputs.version }}
            latest

      - name: Extract metadata for Docker
        id: meta-add
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/64mb/prgz
          tags: |
            type=semver,pattern=${{ steps.get_latest_tag.outputs.version }}
            latest

      - name: Concat Docker tags
        id: concat
        run: |
          IMAGE_NAME_ADD="${{ steps.meta-add.outputs.tags }}"
          IMAGE_NAME="${{ steps.meta.outputs.tags }}"
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "${IMAGE_NAME_ADD}" >> $GITHUB_OUTPUT
          echo "${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.concat.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
